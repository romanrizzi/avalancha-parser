
-- Números en unario

fun add
  Zero   , y -> y
  Suc(x) , y -> Suc(add(x, y))

fun mul
  Zero   , _ -> Zero
  Suc(x) , y -> add(y, mul(x, y))

-- Números en binario
--
-- Un número en binario se representa como
-- una secuencia de bits, empezando por el menos
-- significativo, p.ej.
--
--   B0(B1(B1(B1(Z))))
--
-- representa a (1110)_2 es decir 14.

fun incb
  Z              -> B1(Z)
  B0(x)          -> B1(x)
  B1(x)          -> B0(incb(x))

fun addb
  Z     , y      -> y
  x     , Z      -> x
  B0(x) , B0(y)  -> B0(addb(x, y))
  B0(x) , B1(y)  -> B1(addb(x, y))
  B1(x) , B0(y)  -> B1(addb(x, y))
  B1(x) , B1(y)  -> B0(incb(addb(x, y)))

fun mulb
  Z     , _      -> Z
  B0(x) , y      -> B0(mulb(x, y))
  B1(x) , y      -> addb(B0(mulb(x, y)), y)

--

fun mul2  x -> mul(Suc(Suc(Zero)), x)

fun binary_to_unary
  Z              -> Zero
  B0(x)          -> mul2(binary_to_unary(x))
  B1(x)          -> Suc(mul2(binary_to_unary(x)))

print mul(Suc(Suc(Suc(Zero))), Suc(Suc(Suc(Suc(Zero)))))
print binary_to_unary(mulb(B1(B1(Z)), B0(B0(B1(Z)))))

