
fun add
  Zero   , y -> y
  Suc(x) , y -> Suc(add(x, y))

fun mul
  Zero   , _ -> Zero
  Suc(x) , y -> add(y, mul(x, y))

fun incb
  Z              -> B1(Z)
  B0(x)          -> B1(x)
  B1(x)          -> B0(incb(x))

fun addb
  : x , y -> z
  ? is_binary(x) and is_binary(y)
  ! is_binary(z) and
    add(binary_to_unary(x), binary_to_unary(y)) == binary_to_unary(z)

  Z     , y      -> y
  x     , Z      -> x
  B0(x) , B0(y)  -> B0(addb(x, y))
  B0(x) , B1(y)  -> B1(addb(x, y))
  B1(x) , B0(y)  -> B1(addb(x, y))
  B1(x) , B1(y)  -> B0(incb(addb(x, y)))

fun mulb
  : x , y -> z
  ? is_binary(x) and is_binary(y)
  ! is_binary(z) and
    mul(binary_to_unary(x), binary_to_unary(y)) == binary_to_unary(z)

  Z     , _      -> Z
  B0(x) , y      -> B0(mulb(x, y))
  B1(x) , y      -> addb(B0(mulb(x, y)), y)

fun mul2  x -> add(x, x)

fun binary_to_unary
  Z              -> Zero
  B0(x)          -> mul2(binary_to_unary(x))
  B1(x)          -> Suc(mul2(binary_to_unary(x)))

fun is_binary
  Z     -> True
  B0(x) -> is_binary(x)
  B1(x) -> is_binary(x)
  _     -> False

print mulb(B1(B1(Z)), B0(B0(B1(Z))))

